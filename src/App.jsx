/**
 * Main Application Component
 *
 * Root component that sets up:
 * - Routing configuration
 * - Global state providers
 * - Theme provider
 * - Error boundaries
 * - Authentication context
 *
 * Features:
 * - Protected routes
 * - Role-based access
 * - Global error handling
 * - Layout management
 */

import React, { useEffect } from 'react';
import { unstable_HistoryRouter as HistoryRouter, Routes, Route } from 'react-router-dom';
import { createBrowserHistory } from 'history';
import { Provider } from './components/ui/provider';
import LessonEditorPage from './pages/LessonEditorPage';
import ProfilePage from './pages/ProfilePage';
import DashboardPage from './pages/DashboardPage';
import LandingPage from './pages/LandingPage';
import LoginPage from './pages/LoginPage';
import SignupPage from './pages/SignupPage';
import useStore from './store';

// we use history to silence the warning about using an outdated version of react, line generated by A.I.
const history = createBrowserHistory(); // this also allows us pass new future flags of upcoming React Router v7

function App() {
  const loadUser = useStore(({ authSlice }) => authSlice.loadUser);

  useEffect(() => {
  // use a wrapper so can catch failed promises
    const wrapper = async () => {
      try {
        await loadUser();
      } catch (error) {
        console.error('Failed to load current user', error);
      }
    };

    wrapper();
  }, []);

  return (
    <Provider>
      <HistoryRouter
        history={history}
        future={{
          v7_startTransition: true,
          v7_relativeSplatPath: true,
        }}
      >
        <Routes>
          <Route path="/" element={<LandingPage />} />
          <Route path="/login" element={<LoginPage />} />
          <Route path="/signup" element={<SignupPage />} />
          <Route path="/edit/:id" element={<LessonEditorPage />} />
          <Route path="/profile" element={<ProfilePage />} />
          <Route path="/dashboard" element={<DashboardPage />} />
        </Routes>
      </HistoryRouter>
    </Provider>
  );
}

export default App;
